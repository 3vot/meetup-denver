{
  "name": "clay-vfr",
  "version": "0.0.3",
  "description": "Javascript Library for Salesforce, Visualforce using the Clay for Salesforce Package available in AppExchange",
  "main": "index.js",
  "scripts": {
    "test": "tape ./test/remoting.js"
  },
  "author": {
    "name": "@rodriguezartav"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/3vot/clay-vfremoting"
  },
  "license": "BSD-2-Clause",
  "dependencies": {
    "kew": "~0.5.0-alpha.1"
  },
  "devDependencies": {
    "tape": "~2.4.0"
  },
  "readme": "#Visualforce Remoting for use in any Javascript Project\nInspiration and Code from [https://github.com/noeticpenguin/ngForce](ng-force)\n\n## Install\nnpm install clay-vfr\n\n### Dependencies\nUses KEW, which is a lightweight implementation of Q, Javascript Promises.\n\nWritten NODEJS Style. Designed to be used by Clay, but it's real dependency is a Common JS Compiler for the browser like Browserify\n\n### Use\nvar Vfr = require(\"clay-vfr\");\n\nVfr.send( METHOD, OPTIONS, NULLOK )\n\n*METHOD*: is the name of Visualforce Controller and Method like ThreevotApi.handleRest or YOUR_CONTROLLER.YOUR_METHOD. For Packages use NAMESPACE.YOUR_CONTROLLER.YOUR_METHOD\n\nOPTIONS: Visualforce Remoting Methods, like escape. Check Visualforce Remoting Doc in the Version of the Visualforce Page.\n\nNULLOK: Tells the system if it's ok for the response to be NULL, if not it will respond with an error\n\nRETURNS: Vfr.send will return a function that can be called with params. This function returns a promise.\n\n### Example\nvar Vfr = require(\"clay-vfr\");\nvar send = Vfr.send( \"Math_Controller.addNumbers\");\n\nsend(1,5)\n.then( function(result){ result == 6 } )\n.fail( function(error){\n  //Error will be in Salesforce Rest API Error [ { errorCode: \"\", message: \"\" } ]\n})\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/3vot/clay-vfremoting/issues"
  },
  "_id": "clay-vfr@0.0.3",
  "_from": "clay-vfr@0.0.3"
}
